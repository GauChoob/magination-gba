import csv


class Scene:
    def __init__(self, directory_id, scene_id, long_name, inaccessible, short_name, *args):
        self.long_name = long_name
        self.short_name = short_name
        if scene_id:
            if (scene_id_int := int(scene_id)) == 0:
                raise ValueError
            self.id = scene_id_int
            self.directory = False
        else:
            self.id = int(directory_id)
            self.directory = True
            self.short_name = None

    def definition(self):
        if self.directory:
            return f'// Set: {self.long_name}\n'
        return f'Scene_{self.long_name} = {self.id}\n'

    def dictionary(self):
        if self.directory:
            return f'    // Set: {self.long_name}\n'
        return f'    Scene_{self.long_name}: "{self.short_name}",\n'


def main():
    with open('scene_render/exhaustive_scene_list.csv', 'r') as f:
        fr = csv.reader(f, delimiter=',')
        next(fr)  # Skip header
        scenes = [Scene(*row) for row in fr if row[1] != '0']
        with open('temp/scene_autogen.rascript', 'w') as f:
            f.write('// Autogenerated by scene_to_rascript.py\n')
            f.write(''.join([scene.definition() for scene in scenes]))
            f.write('// End of autogenerated scene_to_rascript.py')
            f.write('\n\n')
            f.write('// Autogenerated by scene_to_rascript.py\n')
            f.write('scene_lookup = {\n')
            f.write(''.join([scene.dictionary() for scene in scenes]))
            f.write('}\n')
            f.write('// End of autogenerated scene_to_rascript.py')


if __name__ == '__main__':
    main()
